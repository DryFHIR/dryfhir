worker_processes ${{NUM_WORKERS}};
error_log stderr notice;
daemon off;
pid logs/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include mime.types;

  # pre-load list of fhir-supported resources so it's available to lapis before starting
  # not done inside lapis as lapis doesn't support running functions before `return app'

  # keep track of whenever we've intialised fhirbase in nginx shared memory, if_modified_since
  # with code cache off, init_by_lua_block is run on every request (and shared memory, on the
  # other hand, persists)
  lua_shared_dict fhirbase 12k;

  # keeps track of which resources this server knows about
  lua_shared_dict known_resources 36k;

  init_by_lua_block {
    local fhirbase_initialised = ngx.shared.fhirbase:get("initialised")
    if fhirbase_initialised then return end

    local saved, err = ngx.shared.fhirbase:set("initialised", true)
    if not saved then ngx.log(ngx.WARN, "Could not flag that fhirbase has been initialised; this will have a performance impact as fhirbase might be initialised when unnecessary. Nginx error was: ", err) end

    local init = require("views.init")

    local known_resources = init.get_fhirbase_resources()
    init.setup_fhirbase(known_resources)

    init.setup_app_dryfhir(known_resources, ngx.shared.known_resources)

    print([[fhirbase setup on `]]..init.config.postgres.database..[[` database complete]])
  }

  server {
    listen ${{PORT}};
    lua_code_cache ${{CODE_CACHE}};

    location / {
      default_type text/html;
      content_by_lua '
        require("lapis").serve("app")
      ';
    }

    location /static/ {
      alias static/;
    }

    location /favicon.ico {
      alias static/favicon.ico;
    }
  }
}
